local FIRST_INIT = true

local walls = { "wall0", "wall1", "wall2", "wall3",
                    "wall4", "wall5", "wall6", "wall7", "wall8" } 
local crushers = {"crusher0", "crusher1", "crusher2", "crusher3", 
					"crusher4", "crusher5", "crusher6", "crusher7", "crusher8",}
					
local hero_path = "Gamecontroller_collection:/level/hero#hero"
local walls_path = "Gamecontroller_collection:/level/walls/controller#walls"
local game_gui_path = "Gamecontroller_collection:/game_gui/gui#gui"
local controller_path = "Gamecontroller_collection:/controller#controller"
local sound_dummi_path = "Gamecontroller_collection:/level/walls/sound_dummi"
local coin_path = "Gamecontroller_collection:/level/coin#coin"
					
                    
local amount_of_x_grid = 9
local amount_of_hight_states = 10
local screen_width = 720
local screen_height = 1280          

local middle_bottom = 0.275 -- percent / 100
local middle_top = 0.725
local max_bottom = 0.40 -- 35
local max_top = 0.60 -- 65
local min_bottom = 0.2
local min_top = 0.8

local bottom_height = 0
local top_height = 0
local height_of_one_wall_block = 0
local extend_time = 50 -- how many ticks, till it should reach final position
local extend_done_time = 0
local walls_dy = {}
local walls_scale_fac = 0.1
local crusher_dy = {}
local crusher_scale_fac = 0.1

local walls_y_positions = {}
local walls_y_grid = {}
local walls_current_y_positions = {}
local crusher_y_positions = {}
local crusher_current_y_positions = {}
local crusher_x_positions = {}

local goal = -1
local bg_middle_position = 0

local post_level_generated_done = false -- controller got notified

local DEBUG_spaces = {}
local DEBUG_counter = 1

local is_sound = true

function round(x, n)
	n = math.pow(10, n)
	x = x * n
	return math.floor(x)/n
end	

function generate_level(self, fast)
	
	if fast then
		extend_time = 1
	else
		extend_time = 50
	end
	
	-- random shuffle
	math.randomseed(os.time())
	math.random(); math.random(); math.random()
	
	--Ziel wählen
	temp_goal = math.random(1, amount_of_x_grid)
	while goal == temp_goal do
		temp_goal = math.random(1, amount_of_x_grid)
	end
	goal = temp_goal
	print("[walls] Goal: "..goal)
	
	min_space = 3
	max_goal_height = amount_of_hight_states - (min_space + 1) 
	max_wall_height = amount_of_hight_states -1
	
	msg.post(controller_path, "WALLS: goal_pos", {goal})
	
	print("[walls] generate bottom walls")
		
	-- Bottom 
	for i, w in ipairs(walls) do
		y_size = go.get(w.."#sprite", "size.y")
		-- shouldnt be the highest if goal
		if i == goal then	
			rand = math.random(1, max_goal_height)
		else
			rand = math.random(1, max_wall_height)
		end
	
		-- new pos
		y_pos_new = min_bottom + ( rand * height_of_one_wall_block )
		walls_y_grid[i] = rand
		
		-- Fall der Gleichheit minimieren
		--if y_pos_new == walls_y_positions[i] then
		--	y_pos_new = min_bottom + ( rand * height_of_one_wall_block )
		--end
				
		-- Benachbarte dürfen nicht gleich sein	
		if i > 1 then 
			-- print("[walls] entering while for wall "..i)	
			whilecounter = 0
			while y_pos_new == walls_y_positions[i-1] do
				-- print("[walls] while "..whilecounter)	
				whilecounter = whilecounter + 1
				if i == goal then	
					rand = math.random(1, max_goal_height)
				else
					rand = math.random(1, max_wall_height)
				end
				y_pos_new = min_bottom + ( rand * height_of_one_wall_block )
				
				if whilecounter == 100 then
					break
				end
			end
			-- print("[walls] ending while for wall "..i)	
		end
		
		walls_y_positions[i] = y_pos_new
		walls_current_y_positions[i] = go.get_position(w).y + ((y_size * go.get_scale(w).y) / 2)
		-- scaling
		-- how much it has to be scaled per tick:
		scale_y_new = (y_pos_new - go.get_position(w).y) / (y_size / 2)
		scale_y_div = scale_y_new - go.get_scale(w).y
		scale_y_div_per_step = scale_y_div / extend_time
		walls_dy[i] = scale_y_div_per_step		
	end
	
	goal_wall_height = walls_y_grid[goal]
	goal_crusher_max_height = amount_of_hight_states - goal_wall_height - min_space
	goal_crusher_height = math.random(1, goal_crusher_max_height)	
	temp_space = amount_of_hight_states - goal_wall_height - goal_crusher_height
	
	-- print("[walls] starting while for goal_space")
	
	whilecounter = 0
	while goal_space == temp_space do
		-- print("[walls] while "..whilecounter)	
		whilecounter = whilecounter + 1
		
		goal_crusher_height = math.random(1, goal_crusher_max_height)	
		temp_space = amount_of_hight_states - goal_wall_height - goal_crusher_height
		if whilecounter == 100 then
			break
		end
	end
	
	-- print("[walls] ending while for goal_space")
	
	goal_space = temp_space	

	print("[walls] space: "..goal_space)
	
	print("[walls] generate crusher walls")
	
	for i, w in ipairs(crushers) do
		y_size = go.get(w.."#sprite", "size.y")
		-- new pos
		if i == goal then
			y_pos_new = min_top + (((min_top - max_top) - (walls_y_positions[i] - min_bottom)) - (goal_space * height_of_one_wall_block))
		else
			y_pos_new = min_top + ((min_top - max_top) - (walls_y_positions[i] - min_bottom))
		end	
			
		crusher_y_positions[i] = y_pos_new
		crusher_current_y_positions[i] = go.get_position(w).y + ((y_size * go.get_scale(w).y) / 2)
		-- scaling
		-- how much it has to be scaled per tick:
		scale_y_new = (y_pos_new - go.get_position(w).y) / (y_size / 2)
		scale_y_div = scale_y_new - go.get_scale(w).y
		scale_y_div_per_step = scale_y_div / extend_time
		crusher_dy[i] = scale_y_div_per_step				
	end
	
	-- Background
	bg_width_scale = screen_width / go.get("background#sprite", "size.x")
	bg_height_scale = (screen_height) / go.get("background#sprite", "size.y")
	go.set_scale(vmath.vector3(bg_width_scale, bg_height_scale, 1),"background")
	bg_pos_x = screen_width/2
	bg_pos_y = screen_height
	temp_min_crusher_y = screen_height
	for i, w in ipairs(crushers) do
		if crusher_current_y_positions[i] < temp_min_crusher_y then
			temp_min_crusher_y = crusher_current_y_positions[i]	
		end
	end
	bg_pos_y = temp_min_crusher_y + (go.get("background#sprite", "size.y") * go.get_scale("background").y / 2)	
	go.set_position(vmath.vector3(bg_pos_x, bg_pos_y, 0), "background")
	bg_middle_position = vmath.vector3(bg_pos_x, bg_pos_y, 0)	
		
	-- Background fix
	-- go.set_scale(vmath.vector3(bg_width_scale, bg_height_scale, 1),"background")	
		
	-- send info to hero
	msg.post(hero_path, "walls", walls_current_y_positions)
	msg.post(coin_path, "Walls: walls", walls_current_y_positions)
	msg.post(hero_path, "level_init_done")
	
	extend_done_time = 0
	post_level_generated_done = false
	
	if fast then
		initial_crush()
	end
	
	DEBUG_spaces[DEBUG_counter] = goal_space
	DEBUG_counter = DEBUG_counter + 1
	pprint(DEBUG_spaces)
	
	msg.post(controller_path, "WALLS: goal_space", {goal_space})
end

function initial_crush()
	min_y = screen_height
	for i, w in ipairs(crushers) do
		crush_y = walls_y_positions[i]+go.get_scale(w).y*go.get(w.."#sprite", "size.y")/2
		go.set_position(vmath.vector3(crusher_x_positions[i], crush_y, 0), w)
		
		if crush_y < min_y then
			min_y = crush_y
		end
	end
	
	bg_y =  min_y + (go.get("background#sprite", "size.y") * go.get_scale("background").y / 2)	
	go.set_position(vmath.vector3(screen_width/2, bg_y, 0), "background")	
	msg.post(controller_path, "crushed_init")
end	

function crush(self)
	min_y = screen_height
	for i, w in ipairs(crushers) do
		if i == goal then
			crush_y = walls_y_positions[i]+ goal_space*height_of_one_wall_block +go.get_scale(w).y*go.get(w.."#sprite", "size.y")/2
		else
			crush_y = walls_y_positions[i]+go.get_scale(w).y*go.get(w.."#sprite", "size.y")/2
		end
		go.animate(w, "position.y", go.PLAYBACK_ONCE_FORWARD, crush_y, go.EASING_OUTBOUNCE, 1, 0)
		
		if crush_y < min_y then
			min_y = crush_y
		end
	end
	play_sound("#start_crush_sound")
	bg_y =  min_y - 10 + (go.get("background#sprite", "size.y") * go.get_scale("background").y / 2)	----------------------Eventuell fix bg problem
	msg.post(controller_path, "crushed")
	go.animate("background", "position.y", go.PLAYBACK_ONCE_FORWARD, bg_y, go.EASING_OUTBOUNCE, 1, 0, send_crushed_final_msg)
	go.animate(sound_dummi_path, "position.y", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.4, 0, send_end_sound_delay)	
end

function send_end_sound_delay()
	play_sound("#end_crush_sound")
end

function lift(self)
	for i, w in ipairs(crushers) do
		go.animate(w, "position.y", go.PLAYBACK_ONCE_FORWARD, min_top, go.EASING_INOUTELASTIC, 1, 0)
	end
	
	go.animate("background", "position.y", go.PLAYBACK_ONCE_FORWARD, bg_middle_position.y, go.EASING_INOUTELASTIC, 1, 0, msg.post(controller_path, "WALLS: lifted"))
end

function send_crushed_final_msg() 
	msg.post(controller_path, "WALLS: crushed_final")
end
          

function init(self)	
	-- Calc initial positions
	-- stuff like middleTop and middleBottom
	middle_top = middle_top * screen_height
	middle_bottom = middle_bottom * screen_height
	max_bottom = max_bottom * screen_height
	max_top = max_top * screen_height
	min_bottom = min_bottom * screen_height
	min_top = min_top * screen_height
	bottom_height = max_bottom - min_bottom
	top_height = min_top - max_top
	height_of_one_wall_block = top_height / amount_of_hight_states
	
	-- Calc width and position of Walls // Bottom
	wall_size_x = go.get("wall0#sprite", "size.x")
	wall_new_scale_x = (screen_width / amount_of_x_grid) / wall_size_x +0.01 -- JUST TO FIX WHITE SPACE IN BETWEEN...MAYBE ERROR

    for i, w in ipairs(walls) do
    	new_scale = vmath.vector3(wall_new_scale_x, go.get_scale(w).y, 1)
    	go.set_scale(new_scale, w)      
		
		new_x = ((screen_width / amount_of_x_grid)*(i-1))+(wall_size_x*wall_new_scale_x/2)
		new_position = vmath.vector3(new_x, min_bottom, 0)
    	go.set_position(new_position, w)
    end		
    for i, w in ipairs(crushers) do
    	new_scale = vmath.vector3(wall_new_scale_x, go.get_scale(w).y, 1)
    	go.set_scale(new_scale, w)      
		
		new_x = ((screen_width / amount_of_x_grid)*(i-1))+(wall_size_x*wall_new_scale_x/2)
		new_position = vmath.vector3(new_x, min_top, 0)
    	go.set_position(new_position, w)
    	crusher_x_positions[i] = new_x
    end		 
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	--[[
	for i, w in ipairs(walls_y_positions) do
		v1 = vmath.vector3(0, w, 1) 
		v2 = vmath.vector3(screen_width, w, 1) 
		msg.post("@render:", "draw_line", {start_point = v1, end_point = v2, color = vmath.vector4(1.0, 0.3, 0.0, 1.0)})
	end		
	
	msg.post("@render:", "draw_text", { text = "SPACE "..goal_space, position = vmath.vector3(360, 1280*0.5, 1), color = vmath.vector4(1.0, 0.3, 0.0, 1.0)})
	]]
	
	
	-- arrange walls to their y_pos
	if extend_done_time >= extend_time then
		if not post_level_generated_done then
			if FIRST_INIT then
				msg.post(controller_path, "level_generation_done_first")
				post_level_generated_done = true
				FIRST_INIT = false
			else
				msg.post(controller_path, "level_generation_done")
				post_level_generated_done = true
			end
		end
		return
	end
	
	extend_done_time = extend_done_time + 1
		
	for i, w in ipairs(walls) do
		y_size =  go.get(w.."#sprite", "size.y")
		scale_x = go.get_scale(w).x
		scale_y = go.get_scale(w).y + walls_dy[i]
		scale_z = go.get_scale(w).z
		scale_v = vmath.vector3(scale_x, scale_y, scale_z)
		go.set_scale(scale_v, w)  
		walls_current_y_positions[i] = go.get_position(w).y + ((y_size * go.get_scale(w).y) / 2) 
	end
	
	for i, w in ipairs(crushers) do
		y_size =  go.get(w.."#sprite", "size.y")
		scale_x = go.get_scale(w).x
		scale_y = go.get_scale(w).y + crusher_dy[i]
		scale_z = go.get_scale(w).z
		if(scale_y <= 0) then
			--[[
			print("scale: "..scale_y)
			print("i: "..i)
			print("vorheriges scale: "..go.get_scale(w).y) 
			print("Ziel: "..crusher_y_positions[i])
			print("AktuellePos: "..crusher_current_y_positions[i])
			]]
			scale_y = math.abs(scale_y)
		end
		
		scale_v = vmath.vector3(scale_x, scale_y, scale_z)
		go.set_scale(scale_v, w)  
		crusher_current_y_positions[i] = go.get_position(w).y + ((y_size * go.get_scale(w).y) / 2) 
	end
	
	--print("Test")
	--print(walls_current_y_positions[1])
	--print(walls_y_positions[1])
	
	msg.post(hero_path, "walls", walls_current_y_positions)
	msg.post(coin_path, "Walls: walls", walls_current_y_positions)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("generate_level") then
		generate_level(self, false)
		return
	end
	if message_id == hash("generate_level_fast") then
		generate_level(self, true)
		return
	end	
	if message_id == hash("Crush") then
		print("[Walls] crush")
		crush()
		return
	end
	if message_id == hash("Lift") then
		lift()
		return
	end	
	if message_id == hash("Controller: options") then
		is_sound = message.IS_SOUND
		return
	end	
	
end

function on_input(self, action_id, action)
    --if action_id == hash("left") then
	--	print("leftklick")
	--	generate_level()
	--end   
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function play_sound(comp)
	if not is_sound then
		return
	end
	msg.post(comp, "play_sound", {gain = 1})
end