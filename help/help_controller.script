local timer = -1

local screen_width = 720
local screen_height = 1280   

local hero_path = "help_collection:/hero#hero"
local coin_path = "help_collection:/coin#coin"
local walls_path = "help_collection:/help_walls/controller#help_walls"
local gui_path = "help_collection:/help_gui#help"

local goal_position = 0
local hero_position = 0

local min_timer = 60

local points = 0
local highscore = 20

local level_generated = false

local lift_timer = -1
local level_gerneration_timer = -1

local able_to_move = true
local delay_move_msg = -1

local coin_position = 0
local coin_y = 0

go.property("wait", 0)

function delay(seconds, fn, argument)
	go.animate("#", "wait", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, seconds, 0, function()
	fn(argument)
	end)
end

function init(self)	
	msg.post(".", "acquire_input_focus")
	-- calc_timer
	msg.post(hero_path, "set_able_to_move", {false})
	msg.post(hero_path, "Help_controller: limit_input_y")
	msg.post(hero_path, "controller: path", {"help_collection:/controller#help_controller"})
	msg.post(walls_path, "generate_level_fast")
	msg.post(hero_path, "Controller: dead")		
	msg.post(coin_path, "Controller: path", {"help_collection:/controller#help_controller"})
	
	go.set_scale(400, "help_collection:/Background")
end

function start_lift_timer(self)
	lift_timer = 120
end 

function start_level_generation_timer(self)
	level_gerneration_timer = 60
end
	
function update(self, dt)
	if not level_generated then
		return
	end	
	-- After Crushing
	if lift_timer > 0 then
		lift_timer = lift_timer - 1
	else if lift_timer ~= -1 then
		lift_timer = -1 
		msg.post(walls_path, "Lift")
		msg.post(game_gui_path, "reset_timer")	
		end
	end
	
	-- After Lifting
	if level_gerneration_timer > 0 then
		level_gerneration_timer = level_gerneration_timer - 1
	else if level_gerneration_timer ~= -1 then
		level_gerneration_timer = -1 
		msg.post(walls_path, "generate_level")
		able_to_move = true
		msg.post(hero_path, "spawn")
		msg.post(hero_path, "set_able_to_move", {able_to_move})
		end
	end	
end

-- lift, stop blood, reset timer, disable text
function resume_game_after_death()
	msg.post(hero_path, "Controller: stop_blood")
	msg.post(game_gui_path, "Controller: delete_fail_message")
	lift_and_reset_timer()
end

function lift_and_reset_timer()
	msg.post(walls_path, "Lift")
	msg.post(game_gui_path, "reset_timer")	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("level_generation_done") then
		level_generated = true
		--level_done()
		print("[controller] DONE")
	end
	if message_id == hash("level_generation_done_first") then
		level_generated = true
		print("[controller] FIRST GENERATION DONE")
	end	
	if message_id == hash("crushed") then
		able_to_move = false
		delay_able_to_move_msg(self, 10)
	end	
		if message_id == hash("WALLS: lifted") then
		start_level_generation_timer()
	end
	if message_id == hash("WALLS: crushed_init") then
		able_to_move = false
		msg.post(hero_path, "set_able_to_move", {able_to_move})
		msg.post(walls_path, "Lift")
	end
	if message_id == hash("HERO: hero_pos") then
		hero_position = message[1]
		
		if hero_position == coin_position then
			collect_coin()
		end		
	end	
	if message_id == hash("WALLS: goal_pos") then
		goal_position = message[1]
		msg.post(gui_path, "Controller: goal_pos", {goal_position})
	end	
	if message_id == hash("WALLS: crushed_final") then
		handle_crushed()
	end	
	if message_id == hash("Gui: restart") then
		print("[controller] received restart post")
		restart()
	end	
	if message_id == hash("Gui: back to main menu") then
		print("[controller] received menu post")
		msg.post(hero_path, "despawn")
		msg.post("main:/loader#main", "Controller: load_menu")
	end	
	if message_id == hash("Gui: spawn coin") then
		print("[controller] received coin post")
		spawn_coin()
	end		
	if message_id == hash("Coin: y") then
		coin_y = message[1]	
	end		
end

function delay_able_to_move_msg(self, time) 
	delay_move_msg = time	
end

function restart()
	msg.post(game_gui_path, "set_score", {0})
	stage = 0
	points = 0
	lives = 3
	
	resume_game_after_death()
end

function on_input(self, action_id, action)
    if action_id == hash("left") and action.pressed then
		msg.post(gui_path, "Help_controller: clicked", {action.x, action.y})
	end 
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function spawn_coin()
	math.random(); math.random(); math.random()
	local new_pos = coin_position
	for i = 1,40,1 do
		if coin_position ~= new_pos and new_pos ~= hero_position then
			print("[controller] pos not equal: "..coin_position.." || "..new_pos.." || "..hero_position)
			coin_position = new_pos
			break
		end
		print("[controller] pos equal: "..coin_position.." || "..new_pos)
		new_pos = math.random(1, 9)
	end	
	msg.post(coin_path, "Controller: spawn", {coin_position})	
end

function collect_coin()
	msg.post(coin_path, "Controller: collected")
	msg.post(gui_path, "collected", {position = coin_position, y = coin_y})
	print("[controller] coin collected")
end
